geom_line(data=flip_df, aes(x=ID, y=Minnesota), color="blue") +
geom_line(data=flip_df, aes(x=ID, y=Taiwan.), color="red") +
geom_line(data=flip_df, aes(X=ID, y=France), color="black")
p
flip_df$France
library(ggplot2)
flip_df <- read.csv('flipped_covid_confirmed.csv', h=T)
flip_df$ID <- seq.int(nrow(flip_df))
p <- ggplot() +
geom_line(data=flip_df, aes(x=ID, y=Minnesota), color="blue") +
geom_line(data=flip_df, aes(x=ID, y=Taiwan.), color="red") +
geom_line(data=flip_df, aes(X=ID, y=France), color="black")
p
library(ggplot2)
flip_df <- read.csv('flipped_covid_confirmed.csv', h=T)
flip_df$ID <- seq.int(nrow(flip_df))
p <- ggplot() +
geom_line(data=flip_df, aes(x=ID, y=Minnesota), color="blue") +
geom_line(data=flip_df, aes(x=ID, y=Taiwan.), color="red") +
geom_line(data=flip_df, aes(x=ID, y=France), color="black")
p
library(ggplot2)
par(mfrow=c(1,2))
flip_df <- read.csv('flipped_covid_confirmed.csv', h=T)
flip_df$ID <- seq.int(nrow(flip_df))
p <- ggplot() +
geom_line(data=flip_df, aes(x=ID, y=Minnesota), color="blue") +
geom_line(data=flip_df, aes(x=ID, y=Taiwan.), color="red")
p
p <- ggplot() +
geom_line(data=flip_df, aes(x=ID, y=Minnesota), color="blue") +
geom_line(data=flip_df, aes(x=ID, y=Taiwan.), color="red") +
geom_line(data=flip_df, aes(x=ID, y=France), color="black")
p
library(ggplot2)
par(mfrow=c(1,2))
flip_df <- read.csv('flipped_covid_confirmed.csv', h=T)
flip_df$ID <- seq.int(nrow(flip_df))
p <- ggplot() +
geom_line(data=flip_df, aes(x=ID, y=Minnesota), color="blue") +
geom_line(data=flip_df, aes(x=ID, y=Taiwan.), color="red")
p
p <- ggplot() +
geom_line(data=flip_df, aes(x=ID, y=log(Minnesota)), color="blue") +
geom_line(data=flip_df, aes(x=ID, y=log(Taiwan.)), color="red") +
geom_line(data=flip_df, aes(x=ID, y=log(France)), color="black")
p
library(ggplot2)
par(mfrow=c(1,2))
flip_df <- read.csv('flipped_covid_confirmed.csv', h=T)
flip_df$ID <- seq.int(nrow(flip_df))
p <- ggplot() +
geom_line(data=flip_df, aes(x=ID, y=.), color="blue")
p
library(tibble)
library(ggplot2)
par(mfrow=c(1,2))
flip_df <- read.csv('flipped_covid_confirmed.csv', h=T)
flip_df$ID <- seq.int(nrow(flip_df))
counts_tibble <- as.tibble(flip_df)
p <- ggplot() +
geom_line(data=counts_tibble, aes(x=ID, y=value))
p
counts_tibble
library(tibble)
library(ggplot2)
par(mfrow=c(1,2))
flip_df <- read.csv('flipped_covid_confirmed.csv', h=T)
flip_df$sequence <- seq.int(nrow(flip_df))
new_df <- data.frame(sequence=as.integer(), location=as.character(), count=as.integer())
names(new_df) <- c('sequence','location','count')
old_cols <- names(flip_df)
i=1
for(col_name in old_cols){
i=i+1
if old_cols[i]=="count"{
library(tibble)
library(ggplot2)
par(mfrow=c(1,2))
flip_df <- read.csv('flipped_covid_confirmed.csv', h=T)
flip_df$sequence <- seq.int(nrow(flip_df))
new_df <- data.frame(sequence=as.integer(), location=as.character(), count=as.integer())
names(new_df) <- c('sequence','location','count')
old_cols <- names(flip_df)
i=1
for(col_name in old_cols){
i=i+1
if (old_cols[i]=="count"){
print("Skipping count.")
}
else {
new_df <- rbind(new_df, data.frame(sequence=flip_df$sequence, location=colname, count=flip_df[i]))
}
}
library(tibble)
library(ggplot2)
par(mfrow=c(1,2))
flip_df <- read.csv('flipped_covid_confirmed.csv', h=T)
flip_df$sequence <- seq.int(nrow(flip_df))
new_df <- data.frame(sequence=as.integer(), location=as.character(), count=as.integer())
names(new_df) <- c('sequence','location','count')
old_cols <- names(flip_df)
i=1
for(col_name in old_cols){
i=i+1
if (old_cols[i]=="count"){
print("Skipping count.")
}
else {
new_df <- rbind(new_df, data.frame(sequence=flip_df$sequence, location=col_name, count=flip_df[i]))
}
}
library(tibble)
library(ggplot2)
par(mfrow=c(1,2))
flip_df <- read.csv('flipped_covid_confirmed.csv', h=T)
flip_df$sequence <- seq.int(nrow(flip_df))
new_df <- data.frame(sequence=as.integer(), location=as.character(), count=as.integer())
names(new_df) <- c('sequence','location','count')
old_cols <- names(flip_df)
i=1
for(col_name in old_cols){
i=i+1
if (old_cols[i]=="count"){
print("Skipping count.")
}
else {
#new_df <- rbind(new_df, data.frame(sequence=flip_df$sequence, location=col_name, count=flip_df[i]))
}
}
library(tibble)
library(ggplot2)
par(mfrow=c(1,2))
flip_df <- read.csv('flipped_covid_confirmed.csv', h=T)
flip_df$sequence <- seq.int(nrow(flip_df))
new_df <- data.frame(sequence=as.integer(), location=as.character(), count=as.integer())
names(new_df) <- c('sequence','location','count')
old_cols <- names(flip_df)
i=1
for(col_name in old_cols){
i=i+1
if (old_cols[i]=="count"){
print("Skipping count.")
}
else {
print(i)
#new_df <- rbind(new_df, data.frame(sequence=flip_df$sequence, location=col_name, count=flip_df[i]))
}
}
library(tibble)
library(ggplot2)
par(mfrow=c(1,2))
flip_df <- read.csv('flipped_covid_confirmed.csv', h=T)
flip_df$sequence <- seq.int(nrow(flip_df))
new_df <- data.frame(sequence=as.integer(), location=as.character(), count=as.integer())
names(new_df) <- c('sequence','location','count')
old_cols <- names(flip_df)
i=0
for(col_name in old_cols){
i=i+1
if (old_cols[i]=="count"){
print("Skipping count.")
}
else {
print(i)
#new_df <- rbind(new_df, data.frame(sequence=flip_df$sequence, location=col_name, count=flip_df[i]))
}
}
head(new_df)
old_cols
library(tibble)
library(ggplot2)
par(mfrow=c(1,2))
flip_df <- read.csv('flipped_covid_confirmed.csv', h=T)
flip_df$sequence <- seq.int(nrow(flip_df))
new_df <- data.frame(sequence=as.integer(), location=as.character(), count=as.integer())
names(new_df) <- c('sequence','location','count')
old_cols <- names(flip_df)
i=0
for(col_name in old_cols){
i=i+1
if (old_cols[i]=="sequence"){
print("Skipping count.")
}
else {
print(i)
#new_df <- rbind(new_df, data.frame(sequence=flip_df$sequence, location=col_name, count=flip_df[i]))
}
}
head(new_df)
library(tibble)
library(ggplot2)
par(mfrow=c(1,2))
flip_df <- read.csv('flipped_covid_confirmed.csv', h=T)
flip_df$sequence <- seq.int(nrow(flip_df))
new_df <- data.frame(sequence=as.integer(), location=as.character(), count=as.integer())
names(new_df) <- c('sequence','location','count')
old_cols <- names(flip_df)
i=0
for(col_name in old_cols){
i=i+1
if (old_cols[i]=="sequence"){
print("Skipping sequence")
}
else {
print(c(sequence=flip_df$sequence, location=col_name, count=flip_df[i]))
#new_df <- rbind(new_df, data.frame(sequence=flip_df$sequence, location=col_name, count=flip_df[i]))
}
}
library(tibble)
library(ggplot2)
par(mfrow=c(1,2))
flip_df <- read.csv('flipped_covid_confirmed.csv', h=T)
flip_df$sequence <- seq.int(nrow(flip_df))
new_df <- data.frame(sequence=as.integer(), location=as.character(), count=as.integer())
names(new_df) <- c('sequence','location','count')
old_cols <- names(flip_df)
i=0
for(col_name in old_cols){
i=i+1
if (old_cols[i]=="sequence"){
print("Skipping sequence")
}
else {
print(c(sequence=flip_df$sequence, location=col_name, count=flip_df[i]))
new_df <- rbind(new_df, data.frame(sequence=flip_df$sequence, location=col_name, count=flip_df[i]))
}
}
flip_df[,1]
flip_df[,4]
library(tibble)
library(ggplot2)
par(mfrow=c(1,2))
flip_df <- read.csv('flipped_covid_confirmed.csv', h=T)
flip_df$sequence <- seq.int(nrow(flip_df))
new_df <- data.frame(sequence=as.integer(), location=as.character(), count=as.integer())
names(new_df) <- c('sequence','location','count')
old_cols <- names(flip_df)
i=0
for(col_name in old_cols){
i=i+1
if (old_cols[i]=="sequence"){
print("Skipping sequence")
}
else {
new_df <- rbind(new_df, data.frame(sequence=flip_df$sequence, location=col_name, count=flip_df[,i]))
}
}
head(new_df)
library(tibble)
library(ggplot2)
par(mfrow=c(1,2))
flip_df <- read.csv('flipped_covid_confirmed.csv', h=T)
flip_df$sequence <- seq.int(nrow(flip_df))
new_df <- data.frame(sequence=as.integer(), location=as.character(), count=as.integer())
names(new_df) <- c('sequence','location','count')
old_cols <- names(flip_df)
i=0
for(col_name in old_cols){
i=i+1
if (old_cols[i]=="sequence"){
print("Skipping sequence")
}
else {
new_df <- rbind(new_df, data.frame(sequence=flip_df$sequence, location=col_name, count=flip_df[,i]))
}
}
head(new_df)
rm(list=ls())
df_confirmed <- read.csv('time_series_covid_19_confirmed.csv')
df_deaths <- read.csv('time_series_covid_19_deaths.csv')
df_recovered <- read.csv('time_series_covid_19_recovered.csv')
library(tibble)
library(ggplot2)
par(mfrow=c(1,2))
flip_df <- read.csv('flipped_covid_confirmed.csv', h=T)
flip_df$sequence <- seq.int(nrow(flip_df))
new_df <- data.frame(sequence=as.integer(), location=as.character(), count=as.integer())
names(new_df) <- c('sequence','location','count')
old_cols <- names(flip_df)
i=0
for(col_name in old_cols){
i=i+1
if (old_cols[i]=="sequence"){
print("Skipping sequence")
}
else {
new_df <- rbind(new_df, data.frame(sequence=flip_df$sequence, location=col_name, count=flip_df[,i]))
}
}
head(new_df)
counts_tibble <- as.tibble(flip_df)
p <- ggplot() +
geom_line(data=counts_tibble, aes(x=ID, y=value))
p
tail(new_df)
counts_tibble <- as.tibble(flip_df)
p <- ggplot() +
geom_line(data=new_df, aes(x=sequence, y=count), colour=location)
counts_tibble <- as.tibble(flip_df)
p <- ggplot(new_df, aes(x=sequence, y=count, group=location)) +
geom_line()
p
counts_tibble <- as.tibble(flip_df)
p <- ggplot(new_df, aes(x=sequence, y=count, colour=location)) +
geom_line()
p
counts_tibble <- as.tibble(flip_df)
p <- ggplot(new_df, aes(x=sequence, y=count, group=location)) +
geom_line()
p
counts_tibble <- as.tibble(flip_df)
p <- ggplot(new_df, aes(x=sequence, y=log(count), group=location)) +
geom_line()
p
counts_tibble <- as.tibble(flip_df)
p <- ggplot(new_df, aes(x=sequence, y=log(count), colour=location)) +
geom_line(show.legend = FALSE)
p
new_df <- aggregate(new_df, location)
new_df <- aggregate(new_df, location, FUN=sum())
new_df <- aggregate(new_df, location, FUN=mean())
new_df <- aggregate(new_df, x=location, FUN=mean())
new_df <- aggregate(new_df, new_df$location, FUN=mean())
new_df <- aggregate(new_df, x=new_df$location, FUN=mean())
p <- ggplot(new_df, aes(x=sequence, y=log(count), colour=location)) +
geom_point(show.legend = FALSE)
p
p <- ggplot(new_df, aes(x=sequence, y=log(count), colour=location)) +
geom_line(show.legend = FALSE)
p
p <- ggplot(new_df, aes(x=sequence, y=count, colour=location)) +
geom_line(show.legend = FALSE)
p
new_df$log_count <- log(new_df$count)
p <- ggplot(new_df, aes(x=sequence, y=log_count, colour=location)) +
geom_line(show.legend = FALSE)
p
df_confirmed
names(df_confirmed)
names(df_confirmed)
flip_df <- df_confirmed.T
flip_df <- df_confirmed.t
t(df_confirmed)
names(t(df_confirmed))
df_confirmed
names(df_confirmed)
row_names(df_confirmed)
rowsum(df_confirmed)
row.names(df_confirmed)
df_confirmed$Province.State=='Minnesota'
df[df_confirmed$Province.State=='Minnesota']
df_confirmed[df_confirmed$Province.State=='Minnesota']
subset(df_confirmed, df_confirmed$Province.State=='Minnesota')
subset(df_confirmed, df_confirmed$Province.State=='Minnesota').t
t(subset(df_confirmed, df_confirmed$Province.State=='Minnesota'))
t(subset(df_confirmed, df_confirmed$Province.State=='Minnesota'))[1,]
t(subset(df_confirmed, df_confirmed$Province.State=='Minnesota'))[,1]
t(subset(df_confirmed, df_confirmed$Province.State=='Minnesota'))
# Pull out the columns we're interested in...
# Rename rows...
row.names(df_confirmed)<- seq(1,dim[df_confirmed][1])
# Pull out the columns we're interested in...
# Rename rows...
row.names(df_confirmed)<- seq(1,dim(df_confirmed)[1])
loc = "Minnesota"
t(subset(df_confirmed, df_confirmed$Province.State==loc))
```{r}
# Pull out the columns we're interested in...
# Rename rows...
row.names(df_confirmed)<- seq(1,dim(df_confirmed)[1])
loc = "Minnesota"
t(subset(df_confirmed, df_confirmed$Province.State==loc))
names(df_confirmed)
dfct <- t(subset(df_confirmed, df_confirmed$Province.State==loc))
dfct
names(dfct)
# Pull out the columns we're interested in...
# Rename rows...
row.names(df_confirmed)<- seq(1,dim(df_confirmed)[1])
loc = "Minnesota"
dfct <- t(subset(df_confirmed, df_confirmed$Province.State==loc))
names(dfct)
# Pull out the columns we're interested in...
# Rename rows...
row.names(df_confirmed)<- seq(1,dim(df_confirmed)[1])
loc = "Minnesota"
dfct <- data.frame(t(subset(df_confirmed, df_confirmed$Province.State==loc)))
names(dfct)
# Pull out the columns we're interested in...
# Rename rows...
row.names(df_confirmed)<- seq(1,dim(df_confirmed)[1])
loc = "Minnesota"
dfct <- data.frame(t(subset(df_confirmed, df_confirmed$Province.State==loc)))
head(dfct)
# Pull out the columns we're interested in...
# Rename rows...
row.names(df_confirmed)<- seq(1,dim(df_confirmed)[1])
loc = "Minnesota"
dfct <- data.frame(t(subset(df_confirmed, df_confirmed$Province.State==loc)[5:]))
# Pull out the columns we're interested in...
# Rename rows...
row.names(df_confirmed)<- seq(1,dim(df_confirmed)[1])
loc = "Minnesota"
dfct <- data.frame(
t(subset(df_confirmed, df_confirmed$Province.State==loc))[5:,]
# Pull out the columns we're interested in...
# Rename rows...
row.names(df_confirmed)<- seq(1,dim(df_confirmed)[1])
loc = "Minnesota"
dfct <- data.frame(
t(subset(df_confirmed, df_confirmed$Province.State==loc))[5:]
t(subset(df_confirmed, df_confirmed$Province.State==loc))[5:]
t(subset(df_confirmed, df_confirmed$Province.State==loc))[5:-1]
t(subset(df_confirmed, df_confirmed$Province.State==loc))
t(subset(df_confirmed, df_confirmed$Province.State==loc))[5:,]
v=t(subset(df_confirmed, df_confirmed$Province.State==loc))
typeof(v)
v
typeof(v)
dfct <- data.frame(t(subset(df_confirmed, df_confirmed$Province.State==loc)))
dfct
dfct <- dfct[5:-1,]
dfct <- dfct[5:,]
dfct <- dfct[5:]
dfct <- dfct[5]
dfct <- dfct[5,]
ddfct
dfct
# Pull out the columns we're interested in...
# Rename rows...
row.names(df_confirmed)<- seq(1,dim(df_confirmed)[1])
loc = "Minnesota"
dfct <- data.frame(t(subset(df_confirmed, df_confirmed$Province.State==loc)))
dfct <- tail(dfct, length(dfct)-4)
head(dfct)
# Pull out the columns we're interested in...
# Rename rows...
row.names(df_confirmed)<- seq(1,dim(df_confirmed)[1])
loc = "Minnesota"
dfct <- data.frame(t(subset(df_confirmed, df_confirmed$Province.State==loc)))
dfct <- tail(dfct, length(dfct)-5)
head(dfct)
# Pull out the columns we're interested in...
# Rename rows...
loc = "Minnesota"
dfct <- data.frame(t(subset(df_confirmed, df_confirmed$Province.State==loc)))
dfct <- tail(dfct, length(dfct)-5)
row.names(dfct)<- seq(1,dim(dfct)[1])
head(dfct)
# Pull out the columns we're interested in...
# Rename rows...
loc = "Minnesota"
dfct <- data.frame(t(subset(df_confirmed, df_confirmed$Province.State==loc)))
dfct <- tail(dfct, length(dfct)-5)
row.names(dfct)<- seq(1,dim(dfct)[1])
dfct$location = loc
dfct$sequence = seq(1,dim(dfct)[1])
head(dfct)
# Pull out the columns we're interested in...
# Rename rows...
loc = "Minnesota"
dfct <- data.frame(t(subset(df_confirmed, df_confirmed$Province.State==loc)))
dfct <- tail(dfct, length(dfct)-5)
row.names(dfct)<- seq(1,dim(dfct)[1])
dfct$location = loc
dfct$sequence = seq(1,dim(dfct)[1])
names(dfct)<- c('count','location','sequence')
dfct <- dfct[c('sequence','location','count')]
dfct$log_count<- log(dfct$count)
# Pull out the columns we're interested in...
# Rename rows...
loc = "Minnesota"
dfct <- data.frame(t(subset(df_confirmed, df_confirmed$Province.State==loc)))
dfct <- tail(dfct, length(dfct)-5)
row.names(dfct)<- seq(1,dim(dfct)[1])
dfct$location = loc
dfct$sequence = seq(1,dim(dfct)[1])
names(dfct)<- c('count','location','sequence')
dfct <- dfct[c('sequence','location','count')]
dfct$count <- as.integer(dfct$count)
dfct$log_count<- log(dfct$count)
head(dfct)
# Pull out the columns we're interested in...
# Rename rows...
loc = "Minnesota"
dfct <- data.frame(t(subset(df_confirmed, df_confirmed$Province.State==loc)))
dfct <- tail(dfct, length(dfct)-5)
row.names(dfct)<- seq(1,dim(dfct)[1])
dfct$location = loc
dfct$sequence = seq(1,dim(dfct)[1])
names(dfct)<- c('count','location','sequence')
dfct <- dfct[c('sequence','location','count')]
dfct$count <- as.integer(dfct$count)
dfct$log_count<- log(dfct$count)
head(dfct)
extract_location(df_confirmed, "Minnesota")
# Pull out the columns we're interested in...
# Rename rows...
extract_location <- function(df, location){
dfct <- data.frame(t(subset(df, df$Province.State==loc)))
dfct <- tail(dfct, length(dfct)-5)
row.names(dfct)<- seq(1,dim(dfct)[1])
dfct$location = loc
dfct$sequence = seq(1,dim(dfct)[1])
names(dfct)<- c('count','location','sequence')
dfct <- dfct[c('sequence','location','count')]
dfct$count <- as.integer(dfct$count)
dfct$log_count<- log(dfct$count)
return(dfct)
}
extract_location(df_confirmed, "Minnesota")
